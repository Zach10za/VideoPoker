// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Component should mount correctly 1`] = `
ReactWrapper {
  Symbol(enzyme.__unrendered__): <Connect(App)
    store={
        Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__node__): Object {
    "instance": Connect {
      "__reactInternalMemoizedMaskedChildContext": Object {
        "store": undefined,
        "storeSubscription": undefined,
      },
      "__reactInternalMemoizedMergedChildContext": Object {
        "storeSubscription": undefined,
      },
      "__reactInternalMemoizedUnmaskedChildContext": Object {},
      "_reactInternalFiber": FiberNode {
        "_debugID": 50,
        "_debugIsCurrentlyTiming": false,
        "_debugOwner": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="App"
                  >
                                    <div
                                                      class="table"
                                    >
                                                      <div
                                                                        class="last-score animate"
                                                      />
                                                      <h1
                                                                        class="score"
                                                      >
                                                                        0
                                                      </h1>
                                    </div>
                                    <button
                                                      class="deal"
                                    >
                                                      Deal
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "store": Object {
                                                  "clearActions": [Function],
                                                  "dispatch": [Function],
                                                  "getActions": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                },
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                class="App"
                >
                                <div
                                                class="table"
                                >
                                                <div
                                                                class="last-score animate"
                                                />
                                                <h1
                                                                class="score"
                                                >
                                                                0
                                                </h1>
                                </div>
                                <button
                                                class="deal"
                                >
                                                Deal
                                </button>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "store": Object {
                                                        "clearActions": [Function],
                                                        "dispatch": [Function],
                                                        "getActions": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                      },
                                                    }
                  }
/>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_debugSource": null,
        "actualDuration": 0,
        "actualStartTime": -1,
        "alternate": null,
        "child": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": [Circular],
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
              "lineNumber": 54,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                "lineNumber": 55,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 55,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 56,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "",
                  "className": "last-score animate",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "",
                  "className": "last-score animate",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 57,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "0",
                    "className": "score",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "0",
                    "className": "score",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 57,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Array [],
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Array [],
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 9,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": <h1
                    class="score"
>
                    0
</h1>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h1",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="last-score animate"
/>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="last-score animate"
/>,
                  <h1
                    className="score"
>
                    0
</h1>,
                  Array [],
                ],
                "className": "table",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="last-score animate"
/>,
                  <h1
                    className="score"
>
                    0
</h1>,
                  Array [],
                ],
                "className": "table",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 50,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Deal",
                  "className": "deal",
                  "onClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Deal",
                  "className": "deal",
                  "onClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <button
                  class="deal"
>
                  Deal
</button>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "button",
                "updateQueue": null,
              },
              "stateNode": <div
                class="table"
>
                <div
                                class="last-score animate"
                />
                <h1
                                class="score"
                >
                                0
                </h1>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="table"
>
                  <div
                                    className="last-score animate"
                  />
                  <h1
                                    className="score"
                  >
                                    0
                  </h1>
</div>,
                <button
                  className="deal"
                  onClick={[Function]}
>
                  Deal
</button>,
              ],
              "className": "App",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="table"
>
                  <div
                                    className="last-score animate"
                  />
                  <h1
                                    className="score"
                  >
                                    0
                  </h1>
</div>,
                <button
                  className="deal"
                  onClick={[Function]}
>
                  Deal
</button>,
              ],
              "className": "App",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="App"
>
              <div
                            class="table"
              >
                            <div
                                          class="last-score animate"
                            />
                            <h1
                                          class="score"
                            >
                                          0
                            </h1>
              </div>
              <button
                            class="deal"
              >
                            Deal
              </button>
</div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "memoizedState": Object {
            "deck": Array [],
            "discard": Array [],
            "hand": Array [],
            "lastScore": "",
            "reset": true,
            "score": 0,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "ref": null,
          "return": [Circular],
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": App {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "discardAndScore": [Function],
            "formatScore": [Function],
            "props": Object {
              "discardQueue": Array [],
              "setDiscardQueue": [Function],
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "refs": Object {},
            "resetAndDeal": [Function],
            "state": Object {
              "deck": Array [],
              "discard": Array [],
              "hand": Array [],
              "lastScore": "",
              "reset": true,
              "score": 0,
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "childExpirationTime": 0,
        "effectTag": 5,
        "expirationTime": 0,
        "firstContextDependency": null,
        "firstEffect": null,
        "index": 0,
        "key": null,
        "lastEffect": null,
        "memoizedProps": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "memoizedState": Object {},
        "mode": 0,
        "nextEffect": null,
        "pendingProps": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "ref": null,
        "return": FiberNode {
          "_debugID": 49,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": null,
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": [Circular],
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": [Circular],
          "index": 0,
          "key": null,
          "lastEffect": [Circular],
          "memoizedProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "memoizedState": Object {
            "context": null,
            "mount": true,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "Component": [Function],
            "context": null,
            "props": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 47,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": [Circular],
              "child": null,
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 1,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": null,
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="App"
                  >
                                    <div
                                                      class="table"
                                    >
                                                      <div
                                                                        class="last-score animate"
                                                      />
                                                      <h1
                                                                        class="score"
                                                      >
                                                                        0
                                                      </h1>
                                    </div>
                                    <button
                                                      class="deal"
                                    >
                                                      Deal
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": null,
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": Object {
                  "callback": null,
                  "expirationTime": 1,
                  "next": null,
                  "nextEffect": null,
                  "payload": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "tag": 0,
                },
              },
            },
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 32,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": null,
            "memoizedState": Object {
              "element": <WrapperComponent
                Component={[Function]}
                context={null}
                props={
                                Object {
                                                "store": Object {
                                                  "clearActions": [Function],
                                                  "dispatch": [Function],
                                                  "getActions": [Function],
                                                  "getState": [Function],
                                                  "replaceReducer": [Function],
                                                  "subscribe": [Function],
                                                },
                                              }
                }
/>,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": null,
            "ref": null,
            "return": null,
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Object {
              "containerInfo": <div>
                <div
                                class="App"
                >
                                <div
                                                class="table"
                                >
                                                <div
                                                                class="last-score animate"
                                                />
                                                <h1
                                                                class="score"
                                                >
                                                                0
                                                </h1>
                                </div>
                                <button
                                                class="deal"
                                >
                                                Deal
                                </button>
                </div>
</div>,
              "context": Object {},
              "current": [Circular],
              "didError": false,
              "earliestPendingTime": 0,
              "earliestSuspendedTime": 0,
              "expirationTime": 0,
              "finishedWork": null,
              "firstBatch": null,
              "hydrate": false,
              "interactionThreadID": 12,
              "latestPendingTime": 0,
              "latestPingedTime": 0,
              "latestSuspendedTime": 0,
              "memoizedInteractions": Set {},
              "nextExpirationTimeToWorkOn": 0,
              "nextScheduledRoot": null,
              "pendingChildren": null,
              "pendingCommitExpirationTime": 0,
              "pendingContext": null,
              "pendingInteractionMap": Map {},
              "timeoutHandle": -1,
            },
            "tag": 5,
            "treeBaseDuration": 0,
            "type": null,
            "updateQueue": Object {
              "baseState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "store": Object {
                                                        "clearActions": [Function],
                                                        "dispatch": [Function],
                                                        "getActions": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                      },
                                                    }
                  }
/>,
              },
              "firstCapturedEffect": null,
              "firstCapturedUpdate": null,
              "firstEffect": null,
              "firstUpdate": null,
              "lastCapturedEffect": null,
              "lastCapturedUpdate": null,
              "lastEffect": null,
              "lastUpdate": null,
            },
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": WrapperComponent {
            "_reactInternalFiber": [Circular],
            "_reactInternalInstance": Object {},
            "context": Object {},
            "props": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "refs": Object {},
            "state": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "updater": Object {
              "enqueueForceUpdate": [Function],
              "enqueueReplaceState": [Function],
              "enqueueSetState": [Function],
              "isMounted": [Function],
            },
          },
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "selfBaseDuration": 0,
        "sibling": null,
        "stateNode": [Circular],
        "tag": 2,
        "treeBaseDuration": 0,
        "type": [Function],
        "updateQueue": null,
      },
      "_reactInternalInstance": Object {},
      "context": Object {
        "store": undefined,
        "storeSubscription": undefined,
      },
      "notifyNestedSubs": [Function],
      "props": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "propsMode": true,
      "refs": Object {},
      "renderCount": 0,
      "selector": Object {
        "error": null,
        "props": Object {
          "discardQueue": Array [],
          "setDiscardQueue": [Function],
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "run": [Function],
        "shouldComponentUpdate": false,
      },
      "setWrappedInstance": [Function],
      "state": Object {},
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "subscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      },
      "updater": Object {
        "enqueueForceUpdate": [Function],
        "enqueueReplaceState": [Function],
        "enqueueSetState": [Function],
        "isMounted": [Function],
      },
      "version": 1,
    },
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
    "ref": null,
    "rendered": Object {
      "instance": App {
        "_reactInternalFiber": FiberNode {
          "_debugID": 51,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 50,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 5,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": undefined,
                "storeSubscription": undefined,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "storeSubscription": undefined,
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {},
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": undefined,
                "storeSubscription": undefined,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "propsMode": true,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "discardQueue": Array [],
                  "setDiscardQueue": [Function],
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 52,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": Object {
              "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
              "lineNumber": 54,
            },
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 53,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                "lineNumber": 55,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 55,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 56,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "",
                  "className": "last-score animate",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "",
                  "className": "last-score animate",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 56,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 57,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "0",
                    "className": "score",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "0",
                    "className": "score",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 57,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 2,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Array [],
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Array [],
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": null,
                    "tag": 9,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": null,
                  },
                  "stateNode": <h1
                    class="score"
>
                    0
</h1>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "h1",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="last-score animate"
/>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="last-score animate"
/>,
                  <h1
                    className="score"
>
                    0
</h1>,
                  Array [],
                ],
                "className": "table",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="last-score animate"
/>,
                  <h1
                    className="score"
>
                    0
</h1>,
                  Array [],
                ],
                "className": "table",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": FiberNode {
                "_debugID": 54,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 50,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 1,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": "Deal",
                  "className": "deal",
                  "onClick": [Function],
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": "Deal",
                  "className": "deal",
                  "onClick": [Function],
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": <button
                  class="deal"
>
                  Deal
</button>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "button",
                "updateQueue": null,
              },
              "stateNode": <div
                class="table"
>
                <div
                                class="last-score animate"
                />
                <h1
                                class="score"
                >
                                0
                </h1>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 0,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "children": Array [
                <div
                  className="table"
>
                  <div
                                    className="last-score animate"
                  />
                  <h1
                                    className="score"
                  >
                                    0
                  </h1>
</div>,
                <button
                  className="deal"
                  onClick={[Function]}
>
                  Deal
</button>,
              ],
              "className": "App",
            },
            "memoizedState": null,
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "children": Array [
                <div
                  className="table"
>
                  <div
                                    className="last-score animate"
                  />
                  <h1
                                    className="score"
                  >
                                    0
                  </h1>
</div>,
                <button
                  className="deal"
                  onClick={[Function]}
>
                  Deal
</button>,
              ],
              "className": "App",
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": <div
              class="App"
>
              <div
                            class="table"
              >
                            <div
                                          class="last-score animate"
                            />
                            <h1
                                          class="score"
                            >
                                          0
                            </h1>
              </div>
              <button
                            class="deal"
              >
                            Deal
              </button>
</div>,
            "tag": 7,
            "treeBaseDuration": 0,
            "type": "div",
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 1,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "memoizedState": Object {
            "deck": Array [],
            "discard": Array [],
            "hand": Array [],
            "lastScore": "",
            "reset": true,
            "score": 0,
          },
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 50,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 5,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "memoizedState": Object {},
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 49,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 1,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "memoizedState": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": [Circular],
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 1,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": null,
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": null,
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": Object {
                      "callback": null,
                      "expirationTime": 1,
                      "next": null,
                      "nextEffect": null,
                      "payload": Object {
                        "element": <WrapperComponent
                          Component={[Function]}
                          context={null}
                          props={
                                                    Object {
                                                                              "store": Object {
                                                                                "clearActions": [Function],
                                                                                "dispatch": [Function],
                                                                                "getActions": [Function],
                                                                                "getState": [Function],
                                                                                "replaceReducer": [Function],
                                                                                "subscribe": [Function],
                                                                              },
                                                                            }
                          }
/>,
                      },
                      "tag": 0,
                    },
                  },
                },
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 32,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": null,
                "memoizedState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": null,
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": null,
                },
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": WrapperComponent {
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {},
                "props": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "refs": Object {},
                "state": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": Connect {
              "__reactInternalMemoizedMaskedChildContext": Object {
                "store": undefined,
                "storeSubscription": undefined,
              },
              "__reactInternalMemoizedMergedChildContext": Object {
                "storeSubscription": undefined,
              },
              "__reactInternalMemoizedUnmaskedChildContext": Object {},
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {
                "store": undefined,
                "storeSubscription": undefined,
              },
              "notifyNestedSubs": [Function],
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "propsMode": true,
              "refs": Object {},
              "renderCount": 0,
              "selector": Object {
                "error": null,
                "props": Object {
                  "discardQueue": Array [],
                  "setDiscardQueue": [Function],
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "run": [Function],
                "shouldComponentUpdate": false,
              },
              "setWrappedInstance": [Function],
              "state": Object {},
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "subscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
              "version": 1,
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {},
        "discardAndScore": [Function],
        "formatScore": [Function],
        "props": Object {
          "discardQueue": Array [],
          "setDiscardQueue": [Function],
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          },
        },
        "refs": Object {},
        "resetAndDeal": [Function],
        "state": Object {
          "deck": Array [],
          "discard": Array [],
          "hand": Array [],
          "lastScore": "",
          "reset": true,
          "score": 0,
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "discardQueue": Array [],
        "setDiscardQueue": [Function],
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": <div
          class="App"
>
          <div
                    class="table"
          >
                    <div
                              class="last-score animate"
                    />
                    <h1
                              class="score"
                    >
                              0
                    </h1>
          </div>
          <button
                    class="deal"
          >
                    Deal
          </button>
</div>,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="table"
>
              <div
                            className="last-score animate"
              />
              <h1
                            className="score"
              >
                            0
              </h1>
</div>,
            <button
              className="deal"
              onClick={[Function]}
>
              Deal
</button>,
          ],
          "className": "App",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": <div
              class="table"
>
              <div
                            class="last-score animate"
              />
              <h1
                            class="score"
              >
                            0
              </h1>
</div>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="last-score animate"
/>,
                <h1
                  className="score"
>
                  0
</h1>,
                Array [],
              ],
              "className": "table",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": <div
                  class="last-score animate"
/>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "className": "last-score animate",
                },
                "ref": null,
                "rendered": Array [
                  "",
                ],
                "type": "div",
              },
              Object {
                "instance": <h1
                  class="score"
>
                  0
</h1>,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "0",
                  "className": "score",
                },
                "ref": null,
                "rendered": Array [
                  "0",
                ],
                "type": "h1",
              },
              null,
            ],
            "type": "div",
          },
          Object {
            "instance": <button
              class="deal"
>
              Deal
</button>,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Deal",
              "className": "deal",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              "Deal",
            ],
            "type": "button",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": Connect {
        "__reactInternalMemoizedMaskedChildContext": Object {
          "store": undefined,
          "storeSubscription": undefined,
        },
        "__reactInternalMemoizedMergedChildContext": Object {
          "storeSubscription": undefined,
        },
        "__reactInternalMemoizedUnmaskedChildContext": Object {},
        "_reactInternalFiber": FiberNode {
          "_debugID": 50,
          "_debugIsCurrentlyTiming": false,
          "_debugOwner": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "store": Object {
                                                        "clearActions": [Function],
                                                        "dispatch": [Function],
                                                        "getActions": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                      },
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="App"
                  >
                                    <div
                                                      class="table"
                                    >
                                                      <div
                                                                        class="last-score animate"
                                                      />
                                                      <h1
                                                                        class="score"
                                                      >
                                                                        0
                                                      </h1>
                                    </div>
                                    <button
                                                      class="deal"
                                    >
                                                      Deal
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_debugSource": null,
          "actualDuration": 0,
          "actualStartTime": -1,
          "alternate": null,
          "child": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": [Circular],
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                "lineNumber": 54,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 55,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 56,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "",
                    "className": "last-score animate",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "",
                    "className": "last-score animate",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                      "lineNumber": 57,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "0",
                      "className": "score",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "0",
                      "className": "score",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Array [],
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Array [],
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 9,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": <h1
                      class="score"
>
                      0
</h1>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h1",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="last-score animate"
/>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="last-score animate"
/>,
                    <h1
                      className="score"
>
                      0
</h1>,
                    Array [],
                  ],
                  "className": "table",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="last-score animate"
/>,
                    <h1
                      className="score"
>
                      0
</h1>,
                    Array [],
                  ],
                  "className": "table",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 50,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "Deal",
                    "className": "deal",
                    "onClick": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "Deal",
                    "className": "deal",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <button
                    class="deal"
>
                    Deal
</button>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "button",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="table"
>
                  <div
                                    class="last-score animate"
                  />
                  <h1
                                    class="score"
                  >
                                    0
                  </h1>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="table"
>
                    <div
                                        className="last-score animate"
                    />
                    <h1
                                        className="score"
                    >
                                        0
                    </h1>
</div>,
                  <button
                    className="deal"
                    onClick={[Function]}
>
                    Deal
</button>,
                ],
                "className": "App",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="table"
>
                    <div
                                        className="last-score animate"
                    />
                    <h1
                                        className="score"
                    >
                                        0
                    </h1>
</div>,
                  <button
                    className="deal"
                    onClick={[Function]}
>
                    Deal
</button>,
                ],
                "className": "App",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="App"
>
                <div
                                class="table"
                >
                                <div
                                                class="last-score animate"
                                />
                                <h1
                                                class="score"
                                >
                                                0
                                </h1>
                </div>
                <button
                                class="deal"
                >
                                Deal
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "discardQueue": Array [],
              "setDiscardQueue": [Function],
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "memoizedState": Object {
              "deck": Array [],
              "discard": Array [],
              "hand": Array [],
              "lastScore": "",
              "reset": true,
              "score": 0,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "discardQueue": Array [],
              "setDiscardQueue": [Function],
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "ref": null,
            "return": [Circular],
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": App {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "discardAndScore": [Function],
              "formatScore": [Function],
              "props": Object {
                "discardQueue": Array [],
                "setDiscardQueue": [Function],
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "storeSubscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
              },
              "refs": Object {},
              "resetAndDeal": [Function],
              "state": Object {
                "deck": Array [],
                "discard": Array [],
                "hand": Array [],
                "lastScore": "",
                "reset": true,
                "score": 0,
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "childExpirationTime": 0,
          "effectTag": 5,
          "expirationTime": 0,
          "firstContextDependency": null,
          "firstEffect": null,
          "index": 0,
          "key": null,
          "lastEffect": null,
          "memoizedProps": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "memoizedState": Object {},
          "mode": 0,
          "nextEffect": null,
          "pendingProps": Object {
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "ref": null,
          "return": FiberNode {
            "_debugID": 49,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": null,
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": [Circular],
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": [Circular],
            "index": 0,
            "key": null,
            "lastEffect": [Circular],
            "memoizedProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "memoizedState": Object {
              "context": null,
              "mount": true,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "Component": [Function],
              "context": null,
              "props": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 47,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": null,
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": FiberNode {
                "_debugID": 47,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": [Circular],
                "child": null,
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 1,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": null,
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": null,
                "ref": null,
                "return": null,
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": Object {
                  "containerInfo": <div>
                    <div
                                        class="App"
                    >
                                        <div
                                                            class="table"
                                        >
                                                            <div
                                                                                class="last-score animate"
                                                            />
                                                            <h1
                                                                                class="score"
                                                            >
                                                                                0
                                                            </h1>
                                        </div>
                                        <button
                                                            class="deal"
                                        >
                                                            Deal
                                        </button>
                    </div>
</div>,
                  "context": Object {},
                  "current": [Circular],
                  "didError": false,
                  "earliestPendingTime": 0,
                  "earliestSuspendedTime": 0,
                  "expirationTime": 0,
                  "finishedWork": null,
                  "firstBatch": null,
                  "hydrate": false,
                  "interactionThreadID": 12,
                  "latestPendingTime": 0,
                  "latestPingedTime": 0,
                  "latestSuspendedTime": 0,
                  "memoizedInteractions": Set {},
                  "nextExpirationTimeToWorkOn": 0,
                  "nextScheduledRoot": null,
                  "pendingChildren": null,
                  "pendingCommitExpirationTime": 0,
                  "pendingContext": null,
                  "pendingInteractionMap": Map {},
                  "timeoutHandle": -1,
                },
                "tag": 5,
                "treeBaseDuration": 0,
                "type": null,
                "updateQueue": Object {
                  "baseState": null,
                  "firstCapturedEffect": null,
                  "firstCapturedUpdate": null,
                  "firstEffect": null,
                  "firstUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                  "lastCapturedEffect": null,
                  "lastCapturedUpdate": null,
                  "lastEffect": null,
                  "lastUpdate": Object {
                    "callback": null,
                    "expirationTime": 1,
                    "next": null,
                    "nextEffect": null,
                    "payload": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "tag": 0,
                  },
                },
              },
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 32,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": [Circular],
              "index": 0,
              "key": null,
              "lastEffect": [Circular],
              "memoizedProps": null,
              "memoizedState": Object {
                "element": <WrapperComponent
                  Component={[Function]}
                  context={null}
                  props={
                                    Object {
                                                      "store": Object {
                                                        "clearActions": [Function],
                                                        "dispatch": [Function],
                                                        "getActions": [Function],
                                                        "getState": [Function],
                                                        "replaceReducer": [Function],
                                                        "subscribe": [Function],
                                                      },
                                                    }
                  }
/>,
              },
              "mode": 0,
              "nextEffect": null,
              "pendingProps": null,
              "ref": null,
              "return": null,
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Object {
                "containerInfo": <div>
                  <div
                                    class="App"
                  >
                                    <div
                                                      class="table"
                                    >
                                                      <div
                                                                        class="last-score animate"
                                                      />
                                                      <h1
                                                                        class="score"
                                                      >
                                                                        0
                                                      </h1>
                                    </div>
                                    <button
                                                      class="deal"
                                    >
                                                      Deal
                                    </button>
                  </div>
</div>,
                "context": Object {},
                "current": [Circular],
                "didError": false,
                "earliestPendingTime": 0,
                "earliestSuspendedTime": 0,
                "expirationTime": 0,
                "finishedWork": null,
                "firstBatch": null,
                "hydrate": false,
                "interactionThreadID": 12,
                "latestPendingTime": 0,
                "latestPingedTime": 0,
                "latestSuspendedTime": 0,
                "memoizedInteractions": Set {},
                "nextExpirationTimeToWorkOn": 0,
                "nextScheduledRoot": null,
                "pendingChildren": null,
                "pendingCommitExpirationTime": 0,
                "pendingContext": null,
                "pendingInteractionMap": Map {},
                "timeoutHandle": -1,
              },
              "tag": 5,
              "treeBaseDuration": 0,
              "type": null,
              "updateQueue": Object {
                "baseState": Object {
                  "element": <WrapperComponent
                    Component={[Function]}
                    context={null}
                    props={
                                        Object {
                                                            "store": Object {
                                                              "clearActions": [Function],
                                                              "dispatch": [Function],
                                                              "getActions": [Function],
                                                              "getState": [Function],
                                                              "replaceReducer": [Function],
                                                              "subscribe": [Function],
                                                            },
                                                          }
                    }
/>,
                },
                "firstCapturedEffect": null,
                "firstCapturedUpdate": null,
                "firstEffect": null,
                "firstUpdate": null,
                "lastCapturedEffect": null,
                "lastCapturedUpdate": null,
                "lastEffect": null,
                "lastUpdate": null,
              },
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": WrapperComponent {
              "_reactInternalFiber": [Circular],
              "_reactInternalInstance": Object {},
              "context": Object {},
              "props": Object {
                "Component": [Function],
                "context": null,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "refs": Object {},
              "state": Object {
                "context": null,
                "mount": true,
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
              },
              "updater": Object {
                "enqueueForceUpdate": [Function],
                "enqueueReplaceState": [Function],
                "enqueueSetState": [Function],
                "isMounted": [Function],
              },
            },
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "selfBaseDuration": 0,
          "sibling": null,
          "stateNode": [Circular],
          "tag": 2,
          "treeBaseDuration": 0,
          "type": [Function],
          "updateQueue": null,
        },
        "_reactInternalInstance": Object {},
        "context": Object {
          "store": undefined,
          "storeSubscription": undefined,
        },
        "notifyNestedSubs": [Function],
        "props": Object {
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
        },
        "propsMode": true,
        "refs": Object {},
        "renderCount": 0,
        "selector": Object {
          "error": null,
          "props": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
          },
          "run": [Function],
          "shouldComponentUpdate": false,
        },
        "setWrappedInstance": [Function],
        "state": Object {},
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "subscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        },
        "updater": Object {
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
        },
        "version": 1,
      },
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
      },
      "ref": null,
      "rendered": Object {
        "instance": App {
          "_reactInternalFiber": FiberNode {
            "_debugID": 51,
            "_debugIsCurrentlyTiming": false,
            "_debugOwner": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                class="App"
                        >
                                                <div
                                                                        class="table"
                                                >
                                                                        <div
                                                                                                class="last-score animate"
                                                                        />
                                                                        <h1
                                                                                                class="score"
                                                                        >
                                                                                                0
                                                                        </h1>
                                                </div>
                                                <button
                                                                        class="deal"
                                                >
                                                                        Deal
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 5,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                class="App"
                        >
                                                <div
                                                                        class="table"
                                                >
                                                                        <div
                                                                                                class="last-score animate"
                                                                        />
                                                                        <h1
                                                                                                class="score"
                                                                        >
                                                                                                0
                                                                        </h1>
                                                </div>
                                                <button
                                                                        class="deal"
                                                >
                                                                        Deal
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": undefined,
                  "storeSubscription": undefined,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "storeSubscription": undefined,
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {},
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": undefined,
                  "storeSubscription": undefined,
                },
                "notifyNestedSubs": [Function],
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "propsMode": true,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "discardQueue": Array [],
                    "setDiscardQueue": [Function],
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 1,
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "_debugSource": null,
            "actualDuration": 0,
            "actualStartTime": -1,
            "alternate": null,
            "child": FiberNode {
              "_debugID": 52,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": [Circular],
              "_debugSource": Object {
                "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                "lineNumber": 54,
              },
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": FiberNode {
                "_debugID": 53,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": [Circular],
                "_debugSource": Object {
                  "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                  "lineNumber": 55,
                },
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": FiberNode {
                  "_debugID": 55,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 56,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 0,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "",
                    "className": "last-score animate",
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "",
                    "className": "last-score animate",
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": FiberNode {
                    "_debugID": 56,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": [Circular],
                    "_debugSource": Object {
                      "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                      "lineNumber": 57,
                    },
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": null,
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 0,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 1,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": Object {
                      "children": "0",
                      "className": "score",
                    },
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": Object {
                      "children": "0",
                      "className": "score",
                    },
                    "ref": null,
                    "return": [Circular],
                    "selfBaseDuration": 0,
                    "sibling": FiberNode {
                      "_debugID": 57,
                      "_debugIsCurrentlyTiming": false,
                      "_debugOwner": null,
                      "_debugSource": null,
                      "actualDuration": 0,
                      "actualStartTime": -1,
                      "alternate": null,
                      "child": null,
                      "childExpirationTime": 0,
                      "effectTag": 0,
                      "expirationTime": 0,
                      "firstContextDependency": null,
                      "firstEffect": null,
                      "index": 2,
                      "key": null,
                      "lastEffect": null,
                      "memoizedProps": Array [],
                      "memoizedState": null,
                      "mode": 0,
                      "nextEffect": null,
                      "pendingProps": Array [],
                      "ref": null,
                      "return": [Circular],
                      "selfBaseDuration": 0,
                      "sibling": null,
                      "stateNode": null,
                      "tag": 9,
                      "treeBaseDuration": 0,
                      "type": null,
                      "updateQueue": null,
                    },
                    "stateNode": <h1
                      class="score"
>
                      0
</h1>,
                    "tag": 7,
                    "treeBaseDuration": 0,
                    "type": "h1",
                    "updateQueue": null,
                  },
                  "stateNode": <div
                    class="last-score animate"
/>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "div",
                  "updateQueue": null,
                },
                "childExpirationTime": 0,
                "effectTag": 0,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": null,
                "index": 0,
                "key": null,
                "lastEffect": null,
                "memoizedProps": Object {
                  "children": Array [
                    <div
                      className="last-score animate"
/>,
                    <h1
                      className="score"
>
                      0
</h1>,
                    Array [],
                  ],
                  "className": "table",
                },
                "memoizedState": null,
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "children": Array [
                    <div
                      className="last-score animate"
/>,
                    <h1
                      className="score"
>
                      0
</h1>,
                    Array [],
                  ],
                  "className": "table",
                },
                "ref": null,
                "return": [Circular],
                "selfBaseDuration": 0,
                "sibling": FiberNode {
                  "_debugID": 54,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": [Circular],
                  "_debugSource": Object {
                    "fileName": "C:\\\\Users\\\\zachl\\\\Documents\\\\sweetgreen\\\\src\\\\App.js",
                    "lineNumber": 50,
                  },
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": null,
                  "child": null,
                  "childExpirationTime": 0,
                  "effectTag": 0,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": null,
                  "index": 1,
                  "key": null,
                  "lastEffect": null,
                  "memoizedProps": Object {
                    "children": "Deal",
                    "className": "deal",
                    "onClick": [Function],
                  },
                  "memoizedState": null,
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": Object {
                    "children": "Deal",
                    "className": "deal",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "return": [Circular],
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": <button
                    class="deal"
>
                    Deal
</button>,
                  "tag": 7,
                  "treeBaseDuration": 0,
                  "type": "button",
                  "updateQueue": null,
                },
                "stateNode": <div
                  class="table"
>
                  <div
                                    class="last-score animate"
                  />
                  <h1
                                    class="score"
                  >
                                    0
                  </h1>
</div>,
                "tag": 7,
                "treeBaseDuration": 0,
                "type": "div",
                "updateQueue": null,
              },
              "childExpirationTime": 0,
              "effectTag": 0,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "children": Array [
                  <div
                    className="table"
>
                    <div
                                        className="last-score animate"
                    />
                    <h1
                                        className="score"
                    >
                                        0
                    </h1>
</div>,
                  <button
                    className="deal"
                    onClick={[Function]}
>
                    Deal
</button>,
                ],
                "className": "App",
              },
              "memoizedState": null,
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "children": Array [
                  <div
                    className="table"
>
                    <div
                                        className="last-score animate"
                    />
                    <h1
                                        className="score"
                    >
                                        0
                    </h1>
</div>,
                  <button
                    className="deal"
                    onClick={[Function]}
>
                    Deal
</button>,
                ],
                "className": "App",
              },
              "ref": null,
              "return": [Circular],
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": <div
                class="App"
>
                <div
                                class="table"
                >
                                <div
                                                class="last-score animate"
                                />
                                <h1
                                                class="score"
                                >
                                                0
                                </h1>
                </div>
                <button
                                class="deal"
                >
                                Deal
                </button>
</div>,
              "tag": 7,
              "treeBaseDuration": 0,
              "type": "div",
              "updateQueue": null,
            },
            "childExpirationTime": 0,
            "effectTag": 1,
            "expirationTime": 0,
            "firstContextDependency": null,
            "firstEffect": null,
            "index": 0,
            "key": null,
            "lastEffect": null,
            "memoizedProps": Object {
              "discardQueue": Array [],
              "setDiscardQueue": [Function],
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "memoizedState": Object {
              "deck": Array [],
              "discard": Array [],
              "hand": Array [],
              "lastScore": "",
              "reset": true,
              "score": 0,
            },
            "mode": 0,
            "nextEffect": null,
            "pendingProps": Object {
              "discardQueue": Array [],
              "setDiscardQueue": [Function],
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "storeSubscription": Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "unsubscribe": [Function],
              },
            },
            "ref": null,
            "return": FiberNode {
              "_debugID": 50,
              "_debugIsCurrentlyTiming": false,
              "_debugOwner": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                class="App"
                        >
                                                <div
                                                                        class="table"
                                                >
                                                                        <div
                                                                                                class="last-score animate"
                                                                        />
                                                                        <h1
                                                                                                class="score"
                                                                        >
                                                                                                0
                                                                        </h1>
                                                </div>
                                                <button
                                                                        class="deal"
                                                >
                                                                        Deal
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "_debugSource": null,
              "actualDuration": 0,
              "actualStartTime": -1,
              "alternate": null,
              "child": [Circular],
              "childExpirationTime": 0,
              "effectTag": 5,
              "expirationTime": 0,
              "firstContextDependency": null,
              "firstEffect": null,
              "index": 0,
              "key": null,
              "lastEffect": null,
              "memoizedProps": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "memoizedState": Object {},
              "mode": 0,
              "nextEffect": null,
              "pendingProps": Object {
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
              },
              "ref": null,
              "return": FiberNode {
                "_debugID": 49,
                "_debugIsCurrentlyTiming": false,
                "_debugOwner": null,
                "_debugSource": null,
                "actualDuration": 0,
                "actualStartTime": -1,
                "alternate": null,
                "child": [Circular],
                "childExpirationTime": 0,
                "effectTag": 1,
                "expirationTime": 0,
                "firstContextDependency": null,
                "firstEffect": [Circular],
                "index": 0,
                "key": null,
                "lastEffect": [Circular],
                "memoizedProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "memoizedState": Object {
                  "context": null,
                  "mount": true,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "mode": 0,
                "nextEffect": null,
                "pendingProps": Object {
                  "Component": [Function],
                  "context": null,
                  "props": Object {
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                },
                "ref": null,
                "return": FiberNode {
                  "_debugID": 47,
                  "_debugIsCurrentlyTiming": false,
                  "_debugOwner": null,
                  "_debugSource": null,
                  "actualDuration": 0,
                  "actualStartTime": -1,
                  "alternate": FiberNode {
                    "_debugID": 47,
                    "_debugIsCurrentlyTiming": false,
                    "_debugOwner": null,
                    "_debugSource": null,
                    "actualDuration": 0,
                    "actualStartTime": -1,
                    "alternate": [Circular],
                    "child": null,
                    "childExpirationTime": 0,
                    "effectTag": 0,
                    "expirationTime": 1,
                    "firstContextDependency": null,
                    "firstEffect": null,
                    "index": 0,
                    "key": null,
                    "lastEffect": null,
                    "memoizedProps": null,
                    "memoizedState": null,
                    "mode": 0,
                    "nextEffect": null,
                    "pendingProps": null,
                    "ref": null,
                    "return": null,
                    "selfBaseDuration": 0,
                    "sibling": null,
                    "stateNode": Object {
                      "containerInfo": <div>
                        <div
                                                class="App"
                        >
                                                <div
                                                                        class="table"
                                                >
                                                                        <div
                                                                                                class="last-score animate"
                                                                        />
                                                                        <h1
                                                                                                class="score"
                                                                        >
                                                                                                0
                                                                        </h1>
                                                </div>
                                                <button
                                                                        class="deal"
                                                >
                                                                        Deal
                                                </button>
                        </div>
</div>,
                      "context": Object {},
                      "current": [Circular],
                      "didError": false,
                      "earliestPendingTime": 0,
                      "earliestSuspendedTime": 0,
                      "expirationTime": 0,
                      "finishedWork": null,
                      "firstBatch": null,
                      "hydrate": false,
                      "interactionThreadID": 12,
                      "latestPendingTime": 0,
                      "latestPingedTime": 0,
                      "latestSuspendedTime": 0,
                      "memoizedInteractions": Set {},
                      "nextExpirationTimeToWorkOn": 0,
                      "nextScheduledRoot": null,
                      "pendingChildren": null,
                      "pendingCommitExpirationTime": 0,
                      "pendingContext": null,
                      "pendingInteractionMap": Map {},
                      "timeoutHandle": -1,
                    },
                    "tag": 5,
                    "treeBaseDuration": 0,
                    "type": null,
                    "updateQueue": Object {
                      "baseState": null,
                      "firstCapturedEffect": null,
                      "firstCapturedUpdate": null,
                      "firstEffect": null,
                      "firstUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                      "lastCapturedEffect": null,
                      "lastCapturedUpdate": null,
                      "lastEffect": null,
                      "lastUpdate": Object {
                        "callback": null,
                        "expirationTime": 1,
                        "next": null,
                        "nextEffect": null,
                        "payload": Object {
                          "element": <WrapperComponent
                            Component={[Function]}
                            context={null}
                            props={
                                                        Object {
                                                                                    "store": Object {
                                                                                      "clearActions": [Function],
                                                                                      "dispatch": [Function],
                                                                                      "getActions": [Function],
                                                                                      "getState": [Function],
                                                                                      "replaceReducer": [Function],
                                                                                      "subscribe": [Function],
                                                                                    },
                                                                                  }
                            }
/>,
                        },
                        "tag": 0,
                      },
                    },
                  },
                  "child": [Circular],
                  "childExpirationTime": 0,
                  "effectTag": 32,
                  "expirationTime": 0,
                  "firstContextDependency": null,
                  "firstEffect": [Circular],
                  "index": 0,
                  "key": null,
                  "lastEffect": [Circular],
                  "memoizedProps": null,
                  "memoizedState": Object {
                    "element": <WrapperComponent
                      Component={[Function]}
                      context={null}
                      props={
                                            Object {
                                                                  "store": Object {
                                                                    "clearActions": [Function],
                                                                    "dispatch": [Function],
                                                                    "getActions": [Function],
                                                                    "getState": [Function],
                                                                    "replaceReducer": [Function],
                                                                    "subscribe": [Function],
                                                                  },
                                                                }
                      }
/>,
                  },
                  "mode": 0,
                  "nextEffect": null,
                  "pendingProps": null,
                  "ref": null,
                  "return": null,
                  "selfBaseDuration": 0,
                  "sibling": null,
                  "stateNode": Object {
                    "containerInfo": <div>
                      <div
                                            class="App"
                      >
                                            <div
                                                                  class="table"
                                            >
                                                                  <div
                                                                                        class="last-score animate"
                                                                  />
                                                                  <h1
                                                                                        class="score"
                                                                  >
                                                                                        0
                                                                  </h1>
                                            </div>
                                            <button
                                                                  class="deal"
                                            >
                                                                  Deal
                                            </button>
                      </div>
</div>,
                    "context": Object {},
                    "current": [Circular],
                    "didError": false,
                    "earliestPendingTime": 0,
                    "earliestSuspendedTime": 0,
                    "expirationTime": 0,
                    "finishedWork": null,
                    "firstBatch": null,
                    "hydrate": false,
                    "interactionThreadID": 12,
                    "latestPendingTime": 0,
                    "latestPingedTime": 0,
                    "latestSuspendedTime": 0,
                    "memoizedInteractions": Set {},
                    "nextExpirationTimeToWorkOn": 0,
                    "nextScheduledRoot": null,
                    "pendingChildren": null,
                    "pendingCommitExpirationTime": 0,
                    "pendingContext": null,
                    "pendingInteractionMap": Map {},
                    "timeoutHandle": -1,
                  },
                  "tag": 5,
                  "treeBaseDuration": 0,
                  "type": null,
                  "updateQueue": Object {
                    "baseState": Object {
                      "element": <WrapperComponent
                        Component={[Function]}
                        context={null}
                        props={
                                                Object {
                                                                        "store": Object {
                                                                          "clearActions": [Function],
                                                                          "dispatch": [Function],
                                                                          "getActions": [Function],
                                                                          "getState": [Function],
                                                                          "replaceReducer": [Function],
                                                                          "subscribe": [Function],
                                                                        },
                                                                      }
                        }
/>,
                    },
                    "firstCapturedEffect": null,
                    "firstCapturedUpdate": null,
                    "firstEffect": null,
                    "firstUpdate": null,
                    "lastCapturedEffect": null,
                    "lastCapturedUpdate": null,
                    "lastEffect": null,
                    "lastUpdate": null,
                  },
                },
                "selfBaseDuration": 0,
                "sibling": null,
                "stateNode": WrapperComponent {
                  "_reactInternalFiber": [Circular],
                  "_reactInternalInstance": Object {},
                  "context": Object {},
                  "props": Object {
                    "Component": [Function],
                    "context": null,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "refs": Object {},
                  "state": Object {
                    "context": null,
                    "mount": true,
                    "props": Object {
                      "store": Object {
                        "clearActions": [Function],
                        "dispatch": [Function],
                        "getActions": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                      },
                    },
                  },
                  "updater": Object {
                    "enqueueForceUpdate": [Function],
                    "enqueueReplaceState": [Function],
                    "enqueueSetState": [Function],
                    "isMounted": [Function],
                  },
                },
                "tag": 2,
                "treeBaseDuration": 0,
                "type": [Function],
                "updateQueue": null,
              },
              "selfBaseDuration": 0,
              "sibling": null,
              "stateNode": Connect {
                "__reactInternalMemoizedMaskedChildContext": Object {
                  "store": undefined,
                  "storeSubscription": undefined,
                },
                "__reactInternalMemoizedMergedChildContext": Object {
                  "storeSubscription": undefined,
                },
                "__reactInternalMemoizedUnmaskedChildContext": Object {},
                "_reactInternalFiber": [Circular],
                "_reactInternalInstance": Object {},
                "context": Object {
                  "store": undefined,
                  "storeSubscription": undefined,
                },
                "notifyNestedSubs": [Function],
                "props": Object {
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                },
                "propsMode": true,
                "refs": Object {},
                "renderCount": 0,
                "selector": Object {
                  "error": null,
                  "props": Object {
                    "discardQueue": Array [],
                    "setDiscardQueue": [Function],
                    "store": Object {
                      "clearActions": [Function],
                      "dispatch": [Function],
                      "getActions": [Function],
                      "getState": [Function],
                      "replaceReducer": [Function],
                      "subscribe": [Function],
                    },
                  },
                  "run": [Function],
                  "shouldComponentUpdate": false,
                },
                "setWrappedInstance": [Function],
                "state": Object {},
                "store": Object {
                  "clearActions": [Function],
                  "dispatch": [Function],
                  "getActions": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                },
                "subscription": Subscription {
                  "listeners": Object {
                    "clear": [Function],
                    "get": [Function],
                    "notify": [Function],
                    "subscribe": [Function],
                  },
                  "onStateChange": [Function],
                  "parentSub": undefined,
                  "store": Object {
                    "clearActions": [Function],
                    "dispatch": [Function],
                    "getActions": [Function],
                    "getState": [Function],
                    "replaceReducer": [Function],
                    "subscribe": [Function],
                  },
                  "unsubscribe": [Function],
                },
                "updater": Object {
                  "enqueueForceUpdate": [Function],
                  "enqueueReplaceState": [Function],
                  "enqueueSetState": [Function],
                  "isMounted": [Function],
                },
                "version": 1,
              },
              "tag": 2,
              "treeBaseDuration": 0,
              "type": [Function],
              "updateQueue": null,
            },
            "selfBaseDuration": 0,
            "sibling": null,
            "stateNode": [Circular],
            "tag": 2,
            "treeBaseDuration": 0,
            "type": [Function],
            "updateQueue": null,
          },
          "_reactInternalInstance": Object {},
          "context": Object {},
          "discardAndScore": [Function],
          "formatScore": [Function],
          "props": Object {
            "discardQueue": Array [],
            "setDiscardQueue": [Function],
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "storeSubscription": Subscription {
              "listeners": Object {
                "clear": [Function],
                "get": [Function],
                "notify": [Function],
                "subscribe": [Function],
              },
              "onStateChange": [Function],
              "parentSub": undefined,
              "store": Object {
                "clearActions": [Function],
                "dispatch": [Function],
                "getActions": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
              },
              "unsubscribe": [Function],
            },
          },
          "refs": Object {},
          "resetAndDeal": [Function],
          "state": Object {
            "deck": Array [],
            "discard": Array [],
            "hand": Array [],
            "lastScore": "",
            "reset": true,
            "score": 0,
          },
          "updater": Object {
            "enqueueForceUpdate": [Function],
            "enqueueReplaceState": [Function],
            "enqueueSetState": [Function],
            "isMounted": [Function],
          },
        },
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "discardQueue": Array [],
          "setDiscardQueue": [Function],
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "storeSubscription": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "clearActions": [Function],
              "dispatch": [Function],
              "getActions": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
            },
            "unsubscribe": [Function],
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": <div
            class="App"
>
            <div
                        class="table"
            >
                        <div
                                    class="last-score animate"
                        />
                        <h1
                                    class="score"
                        >
                                    0
                        </h1>
            </div>
            <button
                        class="deal"
            >
                        Deal
            </button>
</div>,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="table"
>
                <div
                                className="last-score animate"
                />
                <h1
                                className="score"
                >
                                0
                </h1>
</div>,
              <button
                className="deal"
                onClick={[Function]}
>
                Deal
</button>,
            ],
            "className": "App",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": <div
                class="table"
>
                <div
                                class="last-score animate"
                />
                <h1
                                class="score"
                >
                                0
                </h1>
</div>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <div
                    className="last-score animate"
/>,
                  <h1
                    className="score"
>
                    0
</h1>,
                  Array [],
                ],
                "className": "table",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": <div
                    class="last-score animate"
/>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "",
                    "className": "last-score animate",
                  },
                  "ref": null,
                  "rendered": Array [
                    "",
                  ],
                  "type": "div",
                },
                Object {
                  "instance": <h1
                    class="score"
>
                    0
</h1>,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "0",
                    "className": "score",
                  },
                  "ref": null,
                  "rendered": Array [
                    "0",
                  ],
                  "type": "h1",
                },
                null,
              ],
              "type": "div",
            },
            Object {
              "instance": <button
                class="deal"
>
                Deal
</button>,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Deal",
                "className": "deal",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                "Deal",
              ],
              "type": "button",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`App Component should render correctly 1`] = `
initialize {
  "0": Object {
    "attribs": Object {
      "class": "App",
    },
    "children": Array [
      Object {
        "attribs": Object {
          "class": "table",
        },
        "children": Array [
          Object {
            "attribs": Object {
              "class": "last-score animate",
            },
            "children": Array [],
            "name": "div",
            "namespace": "http://www.w3.org/1999/xhtml",
            "next": Object {
              "attribs": Object {
                "class": "score",
              },
              "children": Array [
                Object {
                  "data": "0",
                  "next": null,
                  "parent": [Circular],
                  "prev": null,
                  "type": "text",
                },
              ],
              "name": "h1",
              "namespace": "http://www.w3.org/1999/xhtml",
              "next": null,
              "parent": [Circular],
              "prev": [Circular],
              "type": "tag",
              "x-attribsNamespace": Object {
                "class": undefined,
              },
              "x-attribsPrefix": Object {
                "class": undefined,
              },
            },
            "parent": [Circular],
            "prev": null,
            "type": "tag",
            "x-attribsNamespace": Object {
              "class": undefined,
            },
            "x-attribsPrefix": Object {
              "class": undefined,
            },
          },
          Object {
            "attribs": Object {
              "class": "score",
            },
            "children": Array [
              Object {
                "data": "0",
                "next": null,
                "parent": [Circular],
                "prev": null,
                "type": "text",
              },
            ],
            "name": "h1",
            "namespace": "http://www.w3.org/1999/xhtml",
            "next": null,
            "parent": [Circular],
            "prev": Object {
              "attribs": Object {
                "class": "last-score animate",
              },
              "children": Array [],
              "name": "div",
              "namespace": "http://www.w3.org/1999/xhtml",
              "next": [Circular],
              "parent": [Circular],
              "prev": null,
              "type": "tag",
              "x-attribsNamespace": Object {
                "class": undefined,
              },
              "x-attribsPrefix": Object {
                "class": undefined,
              },
            },
            "type": "tag",
            "x-attribsNamespace": Object {
              "class": undefined,
            },
            "x-attribsPrefix": Object {
              "class": undefined,
            },
          },
        ],
        "name": "div",
        "namespace": "http://www.w3.org/1999/xhtml",
        "next": Object {
          "attribs": Object {
            "class": "deal",
          },
          "children": Array [
            Object {
              "data": "Deal",
              "next": null,
              "parent": [Circular],
              "prev": null,
              "type": "text",
            },
          ],
          "name": "button",
          "namespace": "http://www.w3.org/1999/xhtml",
          "next": null,
          "parent": [Circular],
          "prev": [Circular],
          "type": "tag",
          "x-attribsNamespace": Object {
            "class": undefined,
          },
          "x-attribsPrefix": Object {
            "class": undefined,
          },
        },
        "parent": [Circular],
        "prev": null,
        "type": "tag",
        "x-attribsNamespace": Object {
          "class": undefined,
        },
        "x-attribsPrefix": Object {
          "class": undefined,
        },
      },
      Object {
        "attribs": Object {
          "class": "deal",
        },
        "children": Array [
          Object {
            "data": "Deal",
            "next": null,
            "parent": [Circular],
            "prev": null,
            "type": "text",
          },
        ],
        "name": "button",
        "namespace": "http://www.w3.org/1999/xhtml",
        "next": null,
        "parent": [Circular],
        "prev": Object {
          "attribs": Object {
            "class": "table",
          },
          "children": Array [
            Object {
              "attribs": Object {
                "class": "last-score animate",
              },
              "children": Array [],
              "name": "div",
              "namespace": "http://www.w3.org/1999/xhtml",
              "next": Object {
                "attribs": Object {
                  "class": "score",
                },
                "children": Array [
                  Object {
                    "data": "0",
                    "next": null,
                    "parent": [Circular],
                    "prev": null,
                    "type": "text",
                  },
                ],
                "name": "h1",
                "namespace": "http://www.w3.org/1999/xhtml",
                "next": null,
                "parent": [Circular],
                "prev": [Circular],
                "type": "tag",
                "x-attribsNamespace": Object {
                  "class": undefined,
                },
                "x-attribsPrefix": Object {
                  "class": undefined,
                },
              },
              "parent": [Circular],
              "prev": null,
              "type": "tag",
              "x-attribsNamespace": Object {
                "class": undefined,
              },
              "x-attribsPrefix": Object {
                "class": undefined,
              },
            },
            Object {
              "attribs": Object {
                "class": "score",
              },
              "children": Array [
                Object {
                  "data": "0",
                  "next": null,
                  "parent": [Circular],
                  "prev": null,
                  "type": "text",
                },
              ],
              "name": "h1",
              "namespace": "http://www.w3.org/1999/xhtml",
              "next": null,
              "parent": [Circular],
              "prev": Object {
                "attribs": Object {
                  "class": "last-score animate",
                },
                "children": Array [],
                "name": "div",
                "namespace": "http://www.w3.org/1999/xhtml",
                "next": [Circular],
                "parent": [Circular],
                "prev": null,
                "type": "tag",
                "x-attribsNamespace": Object {
                  "class": undefined,
                },
                "x-attribsPrefix": Object {
                  "class": undefined,
                },
              },
              "type": "tag",
              "x-attribsNamespace": Object {
                "class": undefined,
              },
              "x-attribsPrefix": Object {
                "class": undefined,
              },
            },
          ],
          "name": "div",
          "namespace": "http://www.w3.org/1999/xhtml",
          "next": [Circular],
          "parent": [Circular],
          "prev": null,
          "type": "tag",
          "x-attribsNamespace": Object {
            "class": undefined,
          },
          "x-attribsPrefix": Object {
            "class": undefined,
          },
        },
        "type": "tag",
        "x-attribsNamespace": Object {
          "class": undefined,
        },
        "x-attribsPrefix": Object {
          "class": undefined,
        },
      },
    ],
    "name": "div",
    "namespace": "http://www.w3.org/1999/xhtml",
    "next": null,
    "parent": null,
    "prev": null,
    "root": Object {
      "attribs": Object {},
      "children": Array [
        [Circular],
      ],
      "name": "root",
      "namespace": "http://www.w3.org/1999/xhtml",
      "next": null,
      "parent": null,
      "prev": null,
      "type": "root",
      "x-attribsNamespace": Object {},
      "x-attribsPrefix": Object {},
    },
    "type": "tag",
    "x-attribsNamespace": Object {
      "class": undefined,
    },
    "x-attribsPrefix": Object {
      "class": undefined,
    },
  },
  "_root": [Circular],
  "length": 1,
  "options": Object {
    "decodeEntities": true,
    "normalizeWhitespace": false,
    "withDomLvl1": true,
    "xml": false,
  },
}
`;

exports[`App Component should shallow correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(App)
    store={
        Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "discardQueue": Array [],
      "setDiscardQueue": [Function],
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "discardQueue": Array [],
        "setDiscardQueue": [Function],
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "clearActions": [Function],
            "dispatch": [Function],
            "getActions": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          },
          "unsubscribe": [Function],
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
